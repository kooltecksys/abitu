"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTagInfo = void 0;
const fs_1 = __importStar(require("fs"));
const path_1 = require("path");
const language_1 = require("./language");
const utils_1 = require("./utils");
const { access, readFile } = fs_1.promises;
const resolveSrc = (importerFile, srcPath) => path_1.resolve(path_1.dirname(importerFile), srcPath);
async function doesFileExist(file) {
    return access(file, fs_1.default.constants.F_OK)
        .then(() => true)
        .catch(() => false);
}
const getTagInfo = async ({ attributes, filename, content, }) => {
    const dependencies = [];
    // catches empty content and self-closing tags
    const isEmptyContent = content == null || content.trim().length === 0;
    /** only include src file if content of tag is empty */
    if (attributes.src && isEmptyContent) {
        // istanbul ignore if
        if (typeof attributes.src !== 'string') {
            throw new Error('src attribute must be string');
        }
        let path = attributes.src;
        /** Only try to get local files (path starts with ./ or ../) */
        if (utils_1.isValidLocalPath(path)) {
            path = resolveSrc(filename, path);
            if (await doesFileExist(path)) {
                content = (await readFile(path)).toString();
                dependencies.push(path);
            }
            else {
                console.warn(`[svelte-preprocess] The file "${path}" was not found.`);
            }
        }
    }
    const { lang, alias } = language_1.getLanguage(attributes);
    return {
        filename,
        attributes,
        content,
        lang,
        alias,
        dependencies,
    };
};
exports.getTagInfo = getTagInfo;
